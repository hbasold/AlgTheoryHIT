The HelloWorld of free algebras: groups.
Specifically, we construct free groups and show that free group without
generators is isomorphic to the trivial group with one element.

\begin{code}
{-# OPTIONS --without-K --rewriting #-}

module Groups where

open import Universes
open import lib.Basics
open import lib.types.Unit
open import lib.Funext
open import Fin
open import Terms
open import AlgebraicTheories
open import FreeAlgebra
\end{code}

The signature of groups has three operations: the unit as nullary operation,
the inverse as unary operation and multiplication as binary operation.
\begin{code}
data GroupSym : 𝓤₀ ̇ where
  unit : GroupSym
  inv : GroupSym
  mul : GroupSym

group-ar : GroupSym → Type lzero
group-ar unit  = ⊥
group-ar inv   = ⊤
group-ar mul   = Fin 2

GroupSig : Signature 𝓤₀ 𝓤₀
GroupSig = record
  { sym = GroupSym
  ; ar = group-ar
  }
\end{code}

We simplify notation a bit and introduce constructors for complex group
terms.
This allows us to write, for example, t ‣ u for the multiplication of terms
t and u that are generated by the signature of groups.
Similarly, we write - t for the inverse and e for the unit term.
Finally, injection of variables x is written ↑ x.
\begin{code}
infixl 80 -_ ↑_
infixl 50 _‣_

args2 : ∀ {X : 𝓤₀ ̇} → X → X → FinMapDom X 2
args2 x y = dom-S x (dom-S y dom-Z)

fmap2  : ∀ {X} → X → X → Fin 2 → X
fmap2 x y = Fin-map (args2 x y)

_‣_ : {X : 𝓤₀ ̇} → Term GroupSig X → Term GroupSig X → Term GroupSig X
t ‣ u = node mul (fmap2 t u)

-_ : {X : 𝓤₀ ̇} → Term GroupSig X → Term GroupSig X
-_ t = node inv λ _ → t

e : {X : 𝓤₀ ̇} → Term GroupSig X
e = node unit ⊥-elim

↑_ : {X : 𝓤₀ ̇} → X → Term GroupSig X
↑_ = var

\end{code}

The equational theory of groups has associativity with three variables:
∀ x y z. x ∙ (y ∙ z) = (x ∙ y) ∙ z.
All other axioms only have one variable.
\begin{code}
data GroupEqAr (X : 𝓤₀ ̇) : 𝓤₀ ̇ where
  assoc : X → X → X → GroupEqAr X
  unitₗ : X → GroupEqAr X
  unitᵣ : X → GroupEqAr X
  invᵣ : X → GroupEqAr X
  invₗ : X → GroupEqAr X
\end{code}

We use the idea to represent equations by natural transformations l and r,
where l represents the left- and r the right-hand side of an equation.
With this idea in mind, the following just states the usual group axioms.
\begin{code}
GroupEqs : ∀ {X} → Rel (Term GroupSig X) 𝓤₀
GroupEqs = Nat-to-Rel F l r
  where
    F : 𝓤₀ ⟶ 𝓤₀
    F X = GroupEqAr X

    l r : F ⇒ Term GroupSig
    l (assoc x y z)  = ↑ x ‣ (↑ y ‣ ↑ z)
    l (unitₗ x)      = e ‣ ↑ x
    l (unitᵣ x)      = ↑ x ‣ e
    l (invᵣ x)       = ↑ x ‣ -(↑ x)
    l (invₗ x)       = - (↑ x) ‣ ↑ x

    r (assoc x y z)  = (↑ x ‣ ↑ y) ‣ ↑ z
    r (unitₗ x)      = ↑ x
    r (unitᵣ x)      = ↑ x
    r (invᵣ x)       = e
    r (invₗ x)       = e

\end{code}

We pack the signature and equations into an algebraic theory.
\begin{code}
𝓖 : AlgTheory 𝓤₀ 𝓤₀ 𝓤₀
𝓖 = record
  { sig = GroupSig ; eqs = GroupEqs }

\end{code}

Given this theory, we can generate the free group as free algebra over the
group theory 𝓖.
\begin{code}
InitialGroup : Algebra 𝓖
InitialGroup = InitialAlgebra

InitialGroup-Initial : IsInitial InitialGroup
InitialGroup-Initial = FreeAlg-Initial

open Algebra InitialGroup renaming (carrier to G; algebra to a; algebra* to a*)
\end{code}

Let us introduce some notation for the unit, inverse and multiplication in the
free group.
\begin{code}
e* : G
e* = a* e

inv* : G → G
inv* g = a inv (λ _ → g)

infixl 50 _⍟_

_⍟_ : G → G → G
g₁ ⍟ g₂ = a mul (fmap2 g₁ g₂)
\end{code}

In what follows, we prove that the free group is just the trivial group with
one element.
To this end, we need firts that ⊥-elim is the unique map out of ⊥.
\begin{code}
⊥-elim-unique : ∀ {X : 𝓤₀ ̇} (f : ⊥ → X) → f == ⊥-elim
⊥-elim-unique f = FunextNonDep.λ=-nondep ⊥-elim
\end{code}

Next, we prove some computation rules for the operations in the free group.
\begin{code}
e*-β : a unit ⊥-elim == e*
e*-β = ap (a unit) (! (⊥-elim-unique (a* ∘ ⊥-elim)))

‣-β : ∀ t u → a* (t ‣ u) == a* t ⍟ a* u
‣-β t u =
  a* (t ‣ u) =⟨ idp ⟩
  a* (node mul (fmap2 t u))    =⟨ idp ⟩
  a mul (a* ∘ (fmap2 t u))     =⟨ ap (a mul) (Fin-map-∘ a* _) ⟩
  a mul (fmap2 (a* t) (a* u))  =⟨ idp ⟩
  a* t ⍟ a* u                  =∎

inv-β : ∀ t → a* (- t) == a inv (λ _ → a* t)
inv-β t = idp

flip-inv-var : ∀ x → a* (↑ (inv* x)) == a* (- (↑ x))
flip-inv-var x =
  a* (↑ (inv* x))              =⟨ idp ⟩
  inv* x                       =⟨ idp ⟩
  a inv (λ _ → x)              =⟨ idp ⟩
  a inv (λ _ → a* (↑ x))       =⟨ idp ⟩
  a* (node inv (λ _ → (↑ x)))  =⟨ idp ⟩
  a* (- (↑ x))                 =∎
\end{code}

With these lemmas under our belt, we can lift the group laws to the free group.
\begin{code}
unitᵣ* : ∀ x → x ⍟ e* == x
unitᵣ* x =
  x ⍟ e*                                  =⟨ idp ⟩
  a* (↑ x) ⍟ a* e                         =⟨ ! (‣-β _ _) ⟩
  a* ((↑ x) ‣ e)                          =⟨ resp-eq (unitᵣ x , idp , idp) ⟩
  a* (↑ x)                                =⟨ idp ⟩
  x                                       =∎

invₗ* : ∀ x → inv* x ⍟ x == e*
invₗ* x =
  inv* x ⍟ x                  =⟨ idp ⟩
  a* (↑ (inv* x)) ⍟ a* (↑ x)  =⟨ idp ⟩
  a* (- (↑ x)) ⍟ a* (↑ x)     =⟨ ! (‣-β _ _) ⟩
  a* (- (↑ x) ‣ ↑ x)          =⟨ resp-eq (invₗ x , idp , idp) ⟩
  a* e                        =⟨ idp ⟩
  e*                          =∎
\end{code}

From the group laws, we can prove the standard result that the inverse of the
unit is the unit itself.
\begin{code}
unit-inv : inv* e* == e*
unit-inv =
  inv* e*       =⟨ ! (unitᵣ* (inv* e*)) ⟩
  inv* e* ⍟ e*  =⟨ invₗ* e* ⟩
  e*            =∎
\end{code}

Now, we introduce the trivial group.
\begin{code}
b : (s : GroupSym) → (α : group-ar s → ⊤) → ⊤
b = λ s α → tt

TrivGroup : Algebra 𝓖
TrivGroup = record
  { pre-algebra = record
    { carrier      = ⊤
    ; carrier-set  = Unit-level
    ; algebra      = b
    }
  ; is-algebra = record { resp-eq = λ x → idp }
  }
\end{code}

From initiality, we obtain a homomorphism from the free group G into the
trivial group.
\begin{code}
Initial→Triv : Homomorphism InitialGroup TrivGroup
Initial→Triv = InitialHom TrivGroup
\end{code}

In the other direction, we map the single point to the unit in the free
group.
Using the group laws, it follows that this gives a homomorphism.
\begin{code}
h : ⊤ → G
h = λ _ → e*

h-resp : (s : GroupSym) (α : group-ar s → ⊤) → e* == a s (h ∘ α)
h-resp unit α = ap (a unit) (FunextNonDep.λ=-nondep ⊥-elim)
h-resp inv α =
  e*                =⟨ ! unit-inv ⟩
  inv* e*           =⟨ idp ⟩
  a inv (λ _ → e*)  =⟨ idp ⟩
  a inv (h ∘ α)     =∎
h-resp mul α =
  e*                   =⟨ ! (unitᵣ* e*) ⟩
  e* ⍟ e*              =⟨ idp ⟩
  a mul (fmap2 e* e*)  =⟨ ap (a mul) (! (Fin-map-unique _)) ⟩
  a mul (h ∘ α)        =∎

Triv→Initial : Homomorphism TrivGroup InitialGroup
Triv→Initial = record
  { map = h
  ; resp-ops = h-resp
  }
  where
\end{code}

Now that we have homomorphism in both directions between the free group
and the trivial group, it remains to show that these are inverses.
This follows the usual reasoning by appealing to uniqueness of homomorphism
out of initial objects.
\begin{code}
InitialIsTrivial : InitialGroup ≅ TrivGroup
InitialIsTrivial = record
  { from = Initial→Triv
  ; to = Triv→Initial
  ; inv₁ = FunextNonDep.λ=-nondep (λ x → idp)
  ; inv₂ = lem
  }
  where
    !G : G → G
    !G = Homomorphism.map (InitialHom InitialGroup)

    !⊤ : G → ⊤
    !⊤ = InitialAlgebra-iter TrivGroup

    lem₁ : idf G == !G
    lem₁ = IsInitial.!-unique FreeAlg-Initial (id-hom InitialGroup)

    lem₂ : (s : GroupSym) (α : group-ar s → G) →
           h (!⊤ (a s α)) == a s ((h ∘ !⊤) ∘ α)
    lem₂ s α =
      h (!⊤ (a s α))      =⟨ ap h idp ⟩
      h (b s (!⊤ ∘ α))    =⟨ h-resp s (!⊤ ∘ α) ⟩
      a s (h ∘ !⊤ ∘ α)    =⟨ ap (a s) idp ⟩
      a s ((h ∘ !⊤) ∘ α)  =∎

    h∘!⊤-hom : Homomorphism InitialGroup InitialGroup
    h∘!⊤-hom = record
      { map = h ∘ !⊤
      ; resp-ops = lem₂
      }

    lem : h ∘ !⊤ == idf G
    lem =
      h ∘ !⊤ =⟨ IsInitial.!-unique InitialGroup-Initial h∘!⊤-hom ⟩
      !G =⟨ ! lem₁ ⟩
      idf G =∎
\end{code}
